<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Copying" xml:space="preserve">
    <value>コピー中</value>
  </data>
  <data name="CreatedUpdatelst" xml:space="preserve">
    <value>update.lstが作成されました。（全ての処理が終了しました！）</value>
  </data>
  <data name="CreateExportDir" xml:space="preserve">
    <value>保存先のディレクトリを作成しています。</value>
  </data>
  <data name="ExportFolderCanceled" xml:space="preserve">
    <value>出力先フォルダが選択されませんでした。</value>
  </data>
  <data name="FileList.Text" xml:space="preserve">
    <value>結合されるプラグインのファイル</value>
  </data>
  <data name="FileName.Text" xml:space="preserve">
    <value>ファイル名（相対パス）</value>
  </data>
  <data name="FileNameCS" xml:space="preserve">
    <value>ファイル名（相対パス）</value>
  </data>
  <data name="FinishMsg" xml:space="preserve">
    <value>merged_plugin フォルダに、公式アップデータの"update.exe"と"update.ini"をコピーしてください。</value>
  </data>
  <data name="FinishMsgTitle" xml:space="preserve">
    <value>プラグインの結合が完了しました。</value>
  </data>
  <data name="PluginFolderCenceled" xml:space="preserve">
    <value>プラグインフォルダが選択されませんでした。</value>
  </data>
  <data name="PluginList.Text" xml:space="preserve">
    <value>検出されたプラグイン一覧</value>
  </data>
  <data name="PluginLoaded" xml:space="preserve">
    <value>のプラグインを読み込みました。</value>
  </data>
  <data name="PluginName.Text" xml:space="preserve">
    <value>プラグインフォルダ名</value>
  </data>
  <data name="PluginNameCS" xml:space="preserve">
    <value>プラグインフォルダ名</value>
  </data>
  <data name="RefPlugin.Text" xml:space="preserve">
    <value>参照元プラグイン</value>
  </data>
  <data name="SelectExportFolder.Content" xml:space="preserve">
    <value>出力先フォルダの選択</value>
  </data>
  <data name="SelectPluginFolder" xml:space="preserve">
    <value>プラグインフォルダの選択</value>
  </data>
  <data name="StartMerge.Content" xml:space="preserve">
    <value>結合する</value>
  </data>
  <data name="Version.Text" xml:space="preserve">
    <value>バージョン</value>
  </data>
  <data name="Copylight" xml:space="preserve">
    <value>カスタムメイド3D2のプラグインやアップデータを結合します。
このアプリはKISSの許諾を受けたものではありません。

このソフトウェアは、MITライセンスのもとで公開されています。
©2017 YUKIMOCHI Laboratory

Github : https://github.com/yukimochi/CM3D2_Plugin_Merge
Twitter : @Naoki_Kosaka_
Web : https://lab.yukimochi.jp/</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>1. カスタムメイド3D2のプラグイン・アップデートのzipファイルを展開します。
2. 解凍したフォルダ群を1つのフォルダにまとめて格納してください。
（このまとめたフォルダをプラグインフォルダとします。）
3. プラグインフォルダを"プラグインフォルダの選択"をクリックして指定します。
4. 出力先のフォルダを"出力先フォルダの選択"をクリックして指定します。
5. 必要に応じて、結合元のプラグインの一覧と結合されるプラグインのファイルを確認します。
6. "結合する"をクリックして、結合処理を行います。

※ 出力先フォルダに"merged_plugin"フォルダが作成され、その中に合成済みプラグインが作成されます。
※ "性格パック,プラス,with Chu-B Lip向けプラグイン"には、未対応です。
(フォルダ名に"_oh_"を含むプラグインは、無視されます。)</value>
  </data>
  <data name="DescriptionTitle" xml:space="preserve">
    <value>CM3D2 Plugin Merge Tool の使い方</value>
  </data>
  <data name="Howtouse.Content" xml:space="preserve">
    <value>使い方</value>
  </data>
</root>