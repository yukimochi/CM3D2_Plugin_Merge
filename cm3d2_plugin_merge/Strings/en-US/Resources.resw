<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Copying" xml:space="preserve">
    <value>Copying</value>
  </data>
  <data name="CreatedUpdatelst" xml:space="preserve">
    <value>update.lst has created. (All process has done!)</value>
  </data>
  <data name="CreateExportDir" xml:space="preserve">
    <value>Now creating export directory.</value>
  </data>
  <data name="ExportFolderCanceled" xml:space="preserve">
    <value>Export folder are not selected.</value>
  </data>
  <data name="FileList.Text" xml:space="preserve">
    <value>List of files merging</value>
  </data>
  <data name="FileName.Text" xml:space="preserve">
    <value>File name (Relative path)</value>
  </data>
  <data name="FileNameCS" xml:space="preserve">
    <value>File name (Relative path)</value>
  </data>
  <data name="FinishMsg" xml:space="preserve">
    <value>Please copy the official updater "update.exe" and "update.ini" to the merged_plugin folder.</value>
  </data>
  <data name="FinishMsgTitle" xml:space="preserve">
    <value>Plugin merging are finished.</value>
  </data>
  <data name="PluginFolderCenceled" xml:space="preserve">
    <value>Plugin folder are not selected.</value>
  </data>
  <data name="PluginList.Text" xml:space="preserve">
    <value>List of detected plugins</value>
  </data>
  <data name="PluginLoaded" xml:space="preserve">
    <value>plugins loaded.</value>
  </data>
  <data name="PluginName.Text" xml:space="preserve">
    <value>Plugin folder name</value>
  </data>
  <data name="PluginNameCS" xml:space="preserve">
    <value>Plugin folder name</value>
  </data>
  <data name="RefPlugin.Text" xml:space="preserve">
    <value>Reference plugin</value>
  </data>
  <data name="SelectExportFolder.Content" xml:space="preserve">
    <value>Select Export folder</value>
  </data>
  <data name="SelectPluginFolder" xml:space="preserve">
    <value>Select Plugin folder</value>
  </data>
  <data name="StartMerge.Content" xml:space="preserve">
    <value>Start merge</value>
  </data>
  <data name="Version.Text" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="Copylight" xml:space="preserve">
    <value>Merge Custom Maid 3D2 plugins and updates.
This application is not licensed by KISS.

This software is released under the MIT License.
©2017 YUKIMOCHI Laboratory

Github: https://github.com/yukimochi/CM3D2_Plugin_Merge
Twitter: @Naoki_Kosaka_
Web: https://lab.yukimochi.jp/</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>[1] &lt;ready plug-ins folder&gt;
1-1 If the DLC, updates, plug-ins
 1. Unzip the plug-in/update zip file of Custom Maid 3D2.
 2. Store the unzipped folders grouped together in one folder.
 (We will name this grouped folder "Plugin folder".)
1-2 If the DVD Plugin (add personality, Visual Pack and PLUS)
 1. Under the Plugin folder create a new folder each plugin.
 2. Copy All contents of a DVD in the folder.
[2] &lt;CM3D2 Plugin Merge Tool operations&gt;
1. When combining an edition 32 bits, Click "x64" on the right of "Select Plugin folder" and it's changed to "x86".
2. Specify the plugin folder by clicking "Select Plugin folder".
3. Specify the export folder by clicking "Select Export folder".
4. If necessary, check the List of detected plugins and the List of files merging.
5. Click "Start merge" to perform the merge process.

* A "merged_plugin" folder is created in the export folder, and a merged plugin is created in that folder.
* "with Chu-B Lip plugins, VR patche" are not supported.
(Plugins containing "_oh _" in the folder name are ignored.)</value>
  </data>
  <data name="DescriptionTitle" xml:space="preserve">
    <value>How to use CM3D2 Plugin Merge Tool</value>
  </data>
  <data name="Howtouse.Content" xml:space="preserve">
    <value>How to use</value>
  </data>
  <data name="IOErrorString" xml:space="preserve">
    <value>The file does not exist or there is not enough disk space for the save destination.</value>
  </data>
  <data name="IOErrorTest" xml:space="preserve">
    <value>An error occurred while copying the file.</value>
  </data>
</root>